<!DOCTYPE html>
<html lang="en">

<head>
    <title>
        <%= (typeof page_title !='undefined')?page_title:'Xels Airdrop';%>
    </title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- <link rel="icon" type="image/x-icon" href="/img/icon.ico"> -->

    <!--font awsome-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">

    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <!-- <script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script> -->

    <!-- Popper JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>

    <!-- Latest compiled JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>

    <script src="https://www.gstatic.com/firebasejs/6.2.2/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/6.2.2/firebase-auth.js"></script>

    <!-- <script src="https://www.gstatic.com/firebasejs/6.2.2/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/6.2.2/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/6.2.2/firebase-storage.js"></script> -->
    <script src="https://www.gstatic.com/firebasejs/6.2.2/firebase-storage.js"></script>
    <script src="https://www.gstatic.com/firebasejs/6.2.2/firebase-messaging.js"></script>

    <script src="/js/common.js"></script>
    <script src="/js/jquery.dataTables.min.js"></script>
    <!-- <script src="/js/custom.js"></script> -->
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/form.css">
    <link rel="stylesheet" href="/css/login.css">
    <link rel="stylesheet" href="/css/jquery.dataTables.min.css">

    <!-- <link rel="stylesheet" href="//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css"> -->

   

    <link rel="stylesheet" href="/css/dataTable.css">


    <link rel="manifest" href="/manifest.json">
    <script src="//messaging-public.realtime.co/js/2.1.0/ortc.js"></script>
    <script src="../../firebase-messaging-sw.js"></script>
</head>

<body>

    <div id="content-body ">

        <script>
            // Your web app's Firebase configuration
            var firebaseConfig = {
                apiKey: "AIzaSyAE8V8q3yCpIFhZvfhD-qgMDUxn4UdHvCQ ",
                authDomain: "xelsfirebaseservice.firebaseapp.com ",
                databaseURL: "https://xelsfirebaseservice.firebaseio.com ",
                projectId: "xelsfirebaseservice ",
                storageBucket: "xelsfirebaseservice.appspot.com ",
                messagingSenderId: "1063007170867 ",
                appId: "1:1063007170867:web:7a50f585d53d039e "
            };
            // Initialize Firebase
            firebase.initializeApp(firebaseConfig);

            // [START get_messaging_object]
            // Retrieve Firebase Messaging object.
            const messaging = firebase.messaging();
            //messaging.usePublicVapidKey('BMheRK8EK1x2bDWi9PjaoCJ74pqVcOgnoYfclDnI2QizOwtC4EJTYDVka0-WAxbdbFjMCKIG_j-DjlHWaBCyU5A');
            messaging.requestPermission()
                .then(function() {
                    console.log('have permission :)');
                    return messaging.getToken();
                })
                .then(function(token) {
                    console.log(token);

                })
                .catch(function(err) {
                    console.log('ERROR:')
                    console.log(err);
                });
            // [END get_messaging_object]
            // [START set_public_vapid_key]
            // Add the public key generated from the console here.AAAA

            // [END set_public_vapid_key]
            // IDs of divs that display Instance ID token UI or request permission UI.
            // const tokenDivId = 'token_div';
            // const permissionDivId = 'permission_div';
            // // [START refresh_token]
            // // Callback fired if Instance ID token is updated.
            messaging.onTokenRefresh(() => {
                messaging.getToken().then((refreshedToken) => {
                    console.log('Token refreshed.');
                    // Indicate that the new Instance ID token has not yet been sent to the
                    // app server.
                    setTokenSentToServer(false);
                    // Send Instance ID token to app server.
                    sendTokenToServer(refreshedToken);
                    // [START_EXCLUDE]
                    // Display new Instance ID token and clear UI of all previous messages.
                    resetUI();
                    // [END_EXCLUDE]
                }).catch((err) => {
                    console.log('Unable to retrieve refreshed token ', err);
                    showToken('Unable to retrieve refreshed token ', err);
                });
            });
            // // [END refresh_token]
            // // [START receive_message]
            // // Handle incoming messages. Called when:
            // // - a message is received while the app has focus
            // // - the user clicks on an app notification created by a service worker
            // //   `messaging.setBackgroundMessageHandler` handler.

            messaging.onMessage((payload) => {
                console.log('Message received. ', payload);

                // [START_EXCLUDE]
                // Update the UI to include the received message.
                appendMessage(payload);
                // [END_EXCLUDE]
            });
            // [END receive_message]

            // Add a message to the messages element.
            function appendMessage(payload) {
                const messagesElement = document.querySelector('#messages');
                const dataHeaderELement = document.createElement('h5');
                const dataElement = document.createElement('pre');
                dataElement.style = 'overflow-x:hidden;';
                dataHeaderELement.textContent = 'Received message:';
                dataElement.textContent = JSON.stringify(payload, null, 2);
                messagesElement.appendChild(dataHeaderELement);
                messagesElement.appendChild(dataElement);
            }
        </script>